<# 

.SYNOPSIS
Create-PseudoLocalization generates a pseudo-localized csv file, suitable 
for use with 'locbaml /generate'
    
.DESCRIPTION
Create-PseudoLocalization can be used to generate "an artificial, but 
still readable Euro-like language to exercise your i18n code without 
a formal translation."
    
The export format is compatible with LocBaml. For more information on 
LocBaml, see LINKS.

.PARAMETER inLocation
The path to the input (neutral language) csv file. This is the file 
generated by the 'locbaml /parse' command.

.PARAMETER outLocation
The path where the output file should be saved.
    
.LINK
WPF Globalization and Localization Overview: http://msdn.microsoft.com/en-us/library/ms788718.aspx

.LINK
LocBaml source direct download: http://archive.msdn.microsoft.com/Project/Download/FileDownload.aspx?ProjectName=wpfsamples&DownloadId=9333

.EXAMPLE
.\Create-PseudoLocalization.ps1 .\en-US.csv .\ar.csv

#>

param ([string]$inLocation,[string]$outLocation)

function Get-ScriptDirectory
{
    $Invocation = (Get-Variable MyInvocation -Scope 1).Value
    Split-Path $Invocation.MyCommand.Path
}

# customize the included/excluded properties for your particular project, if necessary
# properties are fully qualified, e.g., System.Windows.Controls.DataGridColumn.Header
# Separate properties with commas If specifying more than one, e.g., 
# $excludedProperties = "Caliburn.Micro.Message.Attach","System.Windows.Controls.DataGridColumn.Header"

# These properties fall under category 'None,' but need to be inluded anyway
$includedProperties = "System.Windows.Controls.DataGridColumn.Header"

# These properties are excluded no matter what; they OVERRIDE the included properties.
# To be clear: if a property is on the both lists, it will be excluded.
$excludedProperties = "Caliburn.Micro.Message.Attach"

# the rules for inclusion are as follows:
# 1.  Value is not null or empty 
#     - AND -
# 2.  Value does not begin with # - this is a link
#     - AND -
# 3.  The property is not on the list of excluded properties
#     - AND -
# (4a. The property is on the list of included properties 
#     - OR -
#  4b. The category is something other than 'None')

$entries = Import-Csv $inLocation -Header BamlName,ResourceKey,LocalizationCategory,Readable,Modifiable,Comments,Value | 
    Where { $_.Value -and $_.Value[0] -ne '#' -and $excludedProperties -notcontains $_.ResourceKey.Split(':')[1] -and ($includedProperties -contains $_.ResourceKey.Split(':')[1]  -or $_.LocalizationCategory -ne "None" ) }

if ($entries.Count -eq $NULL) {
    Write-Error 'no entries found that match rules for localization'
    exit
}

$dir = Get-ScriptDirectory

$pseudoizerDef = [system.io.file]::ReadAllText((Resolve-Path $dir\Psuedoizer.cs))

$assemblies = "System.Windows.Forms"

try {
    Add-Type -TypeDefinition $pseudoizerDef -ReferencedAssemblies $assemblies -ErrorAction STOP
}
catch {
    Write-Host "not creating type, Pseudoizer, because it has already been created"
}

$entries | ForEach-Object { $_.Value = ([Pseudo.Globalization.Psuedoizer]::ConvertToFakeInternationalized($_.Value))}

$entries | Select-Object BamlName,ResourceKey,LocalizationCategory,Readable,Modifiable,Comments,Value | ConvertTo-Csv -OutVariable entriesCSV -NoTypeInformation

if (Test-Path $outLocation) {
    Remove-Item $outLocation
}

$entriesCSV[1..($entriesCSV.count - 1)] | ForEach-Object { Add-Content -Value $_ -Path $outLocation -Encoding UTF8 }

Write-Host "pseudo-localized file created @" (Resolve-Path $outLocation)